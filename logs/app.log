[2020-05-02T08:52:55.262] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T08:52:56.748] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T08:52:58.179] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T08:54:15.939] [INFO] Logging:  - ---Request begins here---
[2020-05-02T08:54:15.940] [INFO] Logging:  - Method: GET
[2020-05-02T08:54:15.941] [INFO] Logging:  - Path:   /
[2020-05-02T08:54:15.942] [INFO] Logging:  - Body:   {}
[2020-05-02T08:54:15.952] [INFO] Logging:  - ---Request ends here---
[2020-05-02T08:54:16.011] [INFO] Logging:  - ---Request begins here---
[2020-05-02T08:54:16.012] [INFO] Logging:  - Method: GET
[2020-05-02T08:54:16.013] [INFO] Logging:  - Path:   /favicon.ico
[2020-05-02T08:54:16.013] [INFO] Logging:  - Body:   {}
[2020-05-02T08:54:16.014] [INFO] Logging:  - ---Request ends here---
[2020-05-02T08:54:30.736] [INFO] Logging:  - ---Request begins here---
[2020-05-02T08:54:30.737] [INFO] Logging:  - Method: GET
[2020-05-02T08:54:30.738] [INFO] Logging:  - Path:   /api/users
[2020-05-02T08:54:30.739] [INFO] Logging:  - Body:   {}
[2020-05-02T08:54:30.750] [INFO] Logging:  - ---Request ends here---
[2020-05-02T08:54:36.078] [INFO] Logging:  - ---Request begins here---
[2020-05-02T08:54:36.080] [INFO] Logging:  - Method: GET
[2020-05-02T08:54:36.080] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T08:54:36.089] [INFO] Logging:  - Body:   {}
[2020-05-02T08:54:36.091] [INFO] Logging:  - ---Request ends here---
[2020-05-02T08:55:17.239] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T08:55:18.794] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:05:56.074] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:05:57.550] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:06:23.950] [ERROR] Logging:  - Error: connect ECONNREFUSED 127.0.0.1:80
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1134:16) {
  errno: 'ECONNREFUSED',
  code: 'ECONNREFUSED',
  syscall: 'connect',
  address: '127.0.0.1',
  port: 80,
  config: {
    url: '/api/questions/',
    method: 'post',
    data: '{"problemStatement":"Sum of 10 and 20 is: ","options":{"a":"10","b":"30","c":"200","d":"2"},"solution":"Answer: B\\nSince 10 + 20 = 30"}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 135
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    _options: {
      protocol: 'http:',
      maxRedirects: 21,
      maxBodyLength: 10485760,
      path: '/api/questions/',
      method: 'POST',
      headers: [Object],
      agent: undefined,
      agents: [Object],
      auth: undefined,
      hostname: null,
      port: null,
      nativeProtocols: [Object],
      pathname: '/api/questions/'
    },
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 135,
    _requestBodyBuffers: [ [Object] ],
    _onNativeResponse: [Function],
    _currentRequest: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: true,
      socket: [Socket],
      connection: [Socket],
      _header: 'POST /api/questions/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.19.2\r\n' +
        'Content-Length: 135\r\n' +
        'Host: localhost\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'POST',
      path: '/api/questions/',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      _redirectable: [Circular],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _currentUrl: 'http:/api/questions/'
  },
  response: undefined,
  isAxiosError: true,
  toJSON: [Function]
}
[2020-05-02T09:07:45.136] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:07:46.783] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:07:59.765] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:08:01.200] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:08:34.070] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:08:35.427] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:09:31.031] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:09:32.535] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:09:33.063] [ERROR] Logging:  - Error: connect ECONNREFUSED 127.0.0.1:80
    at TCPConnectWrap.afterConnect [as oncomplete] (net.js:1134:16) {
  errno: 'ECONNREFUSED',
  code: 'ECONNREFUSED',
  syscall: 'connect',
  address: '127.0.0.1',
  port: 80,
  config: {
    url: '/api/questions/',
    method: 'post',
    data: '{"problemStatement":"Sum of 10 and 20 is: ","options":{"a":"10","b":"30","c":"200","d":"2"},"solution":"Answer: B\\nSince 10 + 20 = 30"}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 135
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    _options: {
      protocol: 'http:',
      maxRedirects: 21,
      maxBodyLength: 10485760,
      path: '/api/questions/',
      method: 'POST',
      headers: [Object],
      agent: undefined,
      agents: [Object],
      auth: undefined,
      hostname: null,
      port: null,
      nativeProtocols: [Object],
      pathname: '/api/questions/'
    },
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 135,
    _requestBodyBuffers: [ [Object] ],
    _onNativeResponse: [Function],
    _currentRequest: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: false,
      _headerSent: true,
      socket: [Socket],
      connection: [Socket],
      _header: 'POST /api/questions/ HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.19.2\r\n' +
        'Content-Length: 135\r\n' +
        'Host: localhost\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'POST',
      path: '/api/questions/',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      _redirectable: [Circular],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _currentUrl: 'http:/api/questions/'
  },
  response: undefined,
  isAxiosError: true,
  toJSON: [Function]
}
[2020-05-02T09:11:25.322] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:11:26.925] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:11:47.239] [INFO] Logging:  - ---Request begins here---
[2020-05-02T09:11:47.240] [INFO] Logging:  - Method: POST
[2020-05-02T09:11:47.240] [INFO] Logging:  - Path:   /api/questions/
[2020-05-02T09:11:47.242] [INFO] Logging:  - Body:   {
  problemStatement: 'Sum of 10 and 20 is: ',
  options: { a: '10', b: '30', c: '200', d: '2' },
  solution: 'Answer: B\nSince 10 + 20 = 30'
}
[2020-05-02T09:11:47.244] [INFO] Logging:  - ---Request ends here---
[2020-05-02T09:11:47.506] [INFO] Logging:  - {
  isAlreadyAsked: false,
  difficultyLevel: 1,
  questionRating: 4,
  _id: 5eacebfb592de34a9854b710,
  problemStatement: 'Sum of 10 and 20 is: ',
  options: { a: '10', b: '30', c: '200', d: '2' },
  solution: 'Answer: B\nSince 10 + 20 = 30',
  dateAsked: 2020-05-02T03:41:47.245Z,
  __v: 0
}
[2020-05-02T09:11:47.527] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '277',
    etag: 'W/"115-/aHDOA6bk0rAF7PM8pU9QlXnoPM"',
    date: 'Sat, 02 May 2020 03:41:47 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/',
    method: 'post',
    data: '{"problemStatement":"Sum of 10 and 20 is: ","options":{"a":"10","b":"30","c":"200","d":"2"},"solution":"Answer: B\\nSince 10 + 20 = 30"}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 135
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /api/questions/ HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 135\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'POST',
    path: '/api/questions/',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 135,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: {
    isAlreadyAsked: false,
    difficultyLevel: 1,
    questionRating: 4,
    _id: '5eacebfb592de34a9854b710',
    problemStatement: 'Sum of 10 and 20 is: ',
    options: { a: '10', b: '30', c: '200', d: '2' },
    solution: 'Answer: B\nSince 10 + 20 = 30',
    dateAsked: '2020-05-02T03:41:47.245Z',
    __v: 0
  }
}
[2020-05-02T09:12:24.028] [INFO] Logging:  - ---Request begins here---
[2020-05-02T09:12:24.028] [INFO] Logging:  - Method: GET
[2020-05-02T09:12:24.029] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T09:12:24.030] [INFO] Logging:  - Body:   {}
[2020-05-02T09:12:24.030] [INFO] Logging:  - ---Request ends here---
[2020-05-02T09:12:47.208] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:12:48.763] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:12:57.494] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:12:58.895] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:13:00.862] [INFO] Logging:  - ---Request begins here---
[2020-05-02T09:13:00.863] [INFO] Logging:  - Method: POST
[2020-05-02T09:13:00.864] [INFO] Logging:  - Path:   /api/questions/
[2020-05-02T09:13:00.865] [INFO] Logging:  - Body:   {
  problemStatement: 'Sum of 50 and 10 is: ',
  options: { a: '60', b: '30', c: '200', d: '2' },
  solution: 'Answer: A\nSince 50 + 10 = 60'
}
[2020-05-02T09:13:00.867] [INFO] Logging:  - ---Request ends here---
[2020-05-02T09:13:01.132] [INFO] Logging:  - {
  isAlreadyAsked: false,
  difficultyLevel: 1,
  questionRating: 4,
  _id: 5eacec447cfc3b5a8885beda,
  problemStatement: 'Sum of 50 and 10 is: ',
  options: { a: '60', b: '30', c: '200', d: '2' },
  solution: 'Answer: A\nSince 50 + 10 = 60',
  dateAsked: 2020-05-02T03:43:00.868Z,
  __v: 0
}
[2020-05-02T09:13:01.150] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '277',
    etag: 'W/"115-26ii8/xfxD8vWeOT7aWkUMqNTBw"',
    date: 'Sat, 02 May 2020 03:43:01 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/',
    method: 'post',
    data: '{"problemStatement":"Sum of 50 and 10 is: ","options":{"a":"60","b":"30","c":"200","d":"2"},"solution":"Answer: A\\nSince 50 + 10 = 60"}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 135
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /api/questions/ HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 135\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'POST',
    path: '/api/questions/',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 135,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: {
    isAlreadyAsked: false,
    difficultyLevel: 1,
    questionRating: 4,
    _id: '5eacec447cfc3b5a8885beda',
    problemStatement: 'Sum of 50 and 10 is: ',
    options: { a: '60', b: '30', c: '200', d: '2' },
    solution: 'Answer: A\nSince 50 + 10 = 60',
    dateAsked: '2020-05-02T03:43:00.868Z',
    __v: 0
  }
}
[2020-05-02T09:13:05.331] [INFO] Logging:  - ---Request begins here---
[2020-05-02T09:13:05.333] [INFO] Logging:  - Method: GET
[2020-05-02T09:13:05.334] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T09:13:05.335] [INFO] Logging:  - Body:   {}
[2020-05-02T09:13:05.336] [INFO] Logging:  - ---Request ends here---
[2020-05-02T09:13:34.208] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:13:36.726] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:13:43.911] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:13:45.374] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:14:11.253] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:14:12.760] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:14:13.882] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:14:15.291] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:14:26.710] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:14:28.115] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:14:33.128] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T09:14:34.570] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T09:14:34.899] [INFO] Logging:  - ---Request begins here---
[2020-05-02T09:14:34.900] [INFO] Logging:  - Method: POST
[2020-05-02T09:14:34.900] [INFO] Logging:  - Path:   /api/questions/
[2020-05-02T09:14:34.901] [INFO] Logging:  - Body:   {
  problemStatement: '50 * 10 = ?',
  options: { a: '60', b: '5', c: '500', d: '40' },
  solution: 'Answer: C',
  difficultyLevel: 2
}
[2020-05-02T09:14:34.903] [INFO] Logging:  - ---Request ends here---
[2020-05-02T09:14:36.438] [INFO] Logging:  - {
  isAlreadyAsked: false,
  difficultyLevel: 1,
  questionRating: 4,
  _id: 5eaceca24df34e61e4ff8b60,
  problemStatement: '50 * 10 = ?',
  options: { a: '60', b: '5', c: '500', d: '40' },
  solution: 'Answer: C',
  dateAsked: 2020-05-02T03:44:34.904Z,
  __v: 0
}
[2020-05-02T09:14:36.456] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '247',
    etag: 'W/"f7-jYpJHuV7hU9gsPsfVONc6QGY3lk"',
    date: 'Sat, 02 May 2020 03:44:36 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/',
    method: 'post',
    data: '{"problemStatement":"50 * 10 = ?","options":{"a":"60","b":"5","c":"500","d":"40"},"solution":"Answer: C","difficultyLevel":2}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 125
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /api/questions/ HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 125\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'POST',
    path: '/api/questions/',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 125,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: {
    isAlreadyAsked: false,
    difficultyLevel: 1,
    questionRating: 4,
    _id: '5eaceca24df34e61e4ff8b60',
    problemStatement: '50 * 10 = ?',
    options: { a: '60', b: '5', c: '500', d: '40' },
    solution: 'Answer: C',
    dateAsked: '2020-05-02T03:44:34.904Z',
    __v: 0
  }
}
[2020-05-02T09:14:39.760] [INFO] Logging:  - ---Request begins here---
[2020-05-02T09:14:39.762] [INFO] Logging:  - Method: GET
[2020-05-02T09:14:39.763] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T09:14:39.764] [INFO] Logging:  - Body:   {}
[2020-05-02T09:14:39.765] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:02:03.122] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:02:04.723] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:02:47.836] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:02:49.221] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:02:51.135] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:02:52.505] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:03:10.895] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:03:12.650] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:03:13.799] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:03:15.262] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:03:44.022] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:03:45.450] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:03:46.351] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:03:47.751] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:08:40.976] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:08:42.548] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:09:39.971] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:09:41.389] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:09:43.331] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:09:44.877] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:12:01.493] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:12:03.045] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:12:05.636] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:12:07.050] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:12:17.734] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:12:19.139] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:12:38.153] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:12:40.108] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:12:41.494] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:13:31.934] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:13:33.458] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:13:42.035] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:13:43.409] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:13:47.580] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:13:49.015] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:14:09.555] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:14:11.003] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:15:08.370] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:15:18.611] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:15:20.577] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:15:25.463] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:15:30.303] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:15:31.192] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:15:34.620] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:17:36.155] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:17:37.665] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:17:38.683] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:17:38.684] [INFO] Logging:  - Method: POST
[2020-05-02T10:17:38.685] [INFO] Logging:  - Path:   /api/questions/
[2020-05-02T10:17:38.686] [INFO] Logging:  - Body:   {
  problemStatement: '500 * 10 = ?',
  options: { a: '600', b: '50', c: '5000', d: '400' },
  solution: 'Answer: C',
  difficultyLevel: 2
}
[2020-05-02T10:17:38.689] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:17:39.523] [INFO] Logging:  - {
  isAlreadyAsked: false,
  difficultyLevel: 2,
  questionRating: 4,
  _id: 5eacfb6a59416c70e4581e55,
  problemStatement: '500 * 10 = ?',
  options: { a: '600', b: '50', c: '5000', d: '400' },
  solution: 'Answer: C',
  dateAsked: 2020-05-02T04:47:38.690Z,
  __v: 0
}
[2020-05-02T10:17:39.531] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '252',
    etag: 'W/"fc-lFZ+YjlRQaeOrTToY4wvmDOW/to"',
    date: 'Sat, 02 May 2020 04:47:39 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/',
    method: 'post',
    data: '{"problemStatement":"500 * 10 = ?","options":{"a":"600","b":"50","c":"5000","d":"400"},"solution":"Answer: C","difficultyLevel":2}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 130
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /api/questions/ HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 130\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'POST',
    path: '/api/questions/',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 130,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: {
    isAlreadyAsked: false,
    difficultyLevel: 2,
    questionRating: 4,
    _id: '5eacfb6a59416c70e4581e55',
    problemStatement: '500 * 10 = ?',
    options: { a: '600', b: '50', c: '5000', d: '400' },
    solution: 'Answer: C',
    dateAsked: '2020-05-02T04:47:38.690Z',
    __v: 0
  }
}
[2020-05-02T10:17:44.122] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:17:44.123] [INFO] Logging:  - Method: GET
[2020-05-02T10:17:44.125] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T10:17:44.126] [INFO] Logging:  - Body:   {}
[2020-05-02T10:17:44.127] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:28:57.791] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:28:59.445] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:29:09.073] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:29:09.074] [INFO] Logging:  - Method: GET
[2020-05-02T10:29:09.075] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T10:29:09.076] [INFO] Logging:  - Body:   {}
[2020-05-02T10:29:09.092] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:29:09.426] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:29:09.426] [INFO] Logging:  - Method: GET
[2020-05-02T10:29:09.427] [INFO] Logging:  - Path:   /favicon.ico
[2020-05-02T10:29:09.427] [INFO] Logging:  - Body:   {}
[2020-05-02T10:29:09.441] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:32:53.564] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:32:55.085] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:33:47.394] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:33:48.913] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:33:57.733] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:33:59.424] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:36:02.574] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:36:04.082] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:36:22.509] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:36:23.972] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:36:48.207] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:36:49.699] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:36:54.915] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:36:54.917] [INFO] Logging:  - Method: POST
[2020-05-02T10:36:54.918] [INFO] Logging:  - Path:   /api/questions/
[2020-05-02T10:36:54.919] [INFO] Logging:  - Body:   {
  problemStatement: '5000 * 100 = ?',
  options: { a: '60000', b: '5000', c: '500000', d: '40000' },
  solution: 'Answer: C',
  difficultyLevel: 2
}
[2020-05-02T10:36:54.924] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:36:55.268] [INFO] Logging:  - {
  isAlreadyAsked: false,
  difficultyLevel: 2,
  questionRating: 4,
  _id: 5eacffee6a167a6154d25881,
  dateAsked: 2020-05-02T05:06:54.926Z,
  problemStatement: '5000 * 100 = ?',
  options: { a: '60000', b: '5000', c: '500000', d: '40000' },
  solution: 'Answer: C',
  __v: 0
}
[2020-05-02T10:36:55.297] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '262',
    etag: 'W/"106-yvxD8HZ1E0pVP0Co6VrmmMB8Nkc"',
    date: 'Sat, 02 May 2020 05:06:55 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/',
    method: 'post',
    data: '{"problemStatement":"5000 * 100 = ?","options":{"a":"60000","b":"5000","c":"500000","d":"40000"},"solution":"Answer: C","difficultyLevel":2}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 140
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'POST /api/questions/ HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 140\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'POST',
    path: '/api/questions/',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 140,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: {
    isAlreadyAsked: false,
    difficultyLevel: 2,
    questionRating: 4,
    _id: '5eacffee6a167a6154d25881',
    dateAsked: '2020-05-02T05:06:54.926Z',
    problemStatement: '5000 * 100 = ?',
    options: { a: '60000', b: '5000', c: '500000', d: '40000' },
    solution: 'Answer: C',
    __v: 0
  }
}
[2020-05-02T10:37:01.120] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:37:01.124] [INFO] Logging:  - Method: GET
[2020-05-02T10:37:01.128] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T10:37:01.132] [INFO] Logging:  - Body:   {}
[2020-05-02T10:37:01.135] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:42:31.470] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:42:33.141] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:46:07.113] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:46:08.659] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:46:36.378] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:46:37.753] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:46:39.230] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:46:59.287] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:47:00.788] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:47:04.159] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:47:05.591] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:47:11.667] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:47:13.113] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:47:51.093] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:47:52.552] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:49:17.770] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:49:17.771] [INFO] Logging:  - Method: POST
[2020-05-02T10:49:17.772] [INFO] Logging:  - Path:   /api/users
[2020-05-02T10:49:17.774] [INFO] Logging:  - Body:   { email: 'Planwewt@gmail.com', phone: 9740579, password: 'abcddfd' }
[2020-05-02T10:49:17.775] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:49:17.851] [INFO] Logging:  - [
  '$2b$10$DtbFqQTfcSXIBdkbrH7NIuwB6gbwckL3JPjlFAD7ssaYXRA9rXAom',
  'Planwewt@gmail.com',
  9740579
]
[2020-05-02T10:49:17.853] [INFO] Logging:  - 9740579
[2020-05-02T10:49:17.870] [ERROR] Logging:  - Error [ValidationError]: User validation failed: passwordHash: Path `passwordHash` (`$2b$10$DtbFqQTfcSXIBdkbrH7NIuwB6gbwckL3JPjlFAD7ssaYXRA9rXAom`) is longer than the maximum allowed length (10).
    at ValidationError.inspect (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\mongoose\lib\error\validation.js:61:24)
    at formatValue (internal/util/inspect.js:563:31)
    at inspect (internal/util/inspect.js:221:10)
    at formatWithOptions (internal/util/inspect.js:1693:40)
    at Object.format (internal/util/inspect.js:1543:10)
    at basicLayout (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\log4js\lib\layouts.js:62:57)
    at app (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\log4js\lib\appenders\file.js:56:23)
    at C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\log4js\lib\log4js.js:42:5
    at Array.forEach (<anonymous>)
    at sendLogEventToAppender (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\log4js\lib\log4js.js:41:21)
    at C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\log4js\lib\clustering.js:23:26
    at Array.forEach (<anonymous>)
    at sendToListeners (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\log4js\lib\clustering.js:23:13)
    at Object.send (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\log4js\lib\clustering.js:89:7)
    at Logger._log (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\log4js\lib\logger.js:90:16)
    at Logger.log (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\log4js\lib\logger.js:73:12) {
  errors: {
    passwordHash: MongooseError [ValidatorError]: Path `passwordHash` (`$2b$10$DtbFqQTfcSXIBdkbrH7NIuwB6gbwckL3JPjlFAD7ssaYXRA9rXAom`) is longer than the maximum allowed length (10).
        at new ValidatorError (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\mongoose\lib\error\validator.js:29:11)
        at validate (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\mongoose\lib\schematype.js:1170:13)
        at C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\mongoose\lib\schematype.js:1153:7
        at Array.forEach (<anonymous>)
        at SchemaString.SchemaType.doValidate (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\mongoose\lib\schematype.js:1098:14)
        at C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\mongoose\lib\document.js:2372:18
        at processTicksAndRejections (internal/process/task_queues.js:76:11) {
      message: 'Path `passwordHash` (`$2b$10$DtbFqQTfcSXIBdkbrH7NIuwB6gbwckL3JPjlFAD7ssaYXRA9rXAom`) is longer than the maximum allowed length (10).',
      name: 'ValidatorError',
      properties: [Object],
      kind: 'maxlength',
      path: 'passwordHash',
      value: '$2b$10$DtbFqQTfcSXIBdkbrH7NIuwB6gbwckL3JPjlFAD7ssaYXRA9rXAom',
      reason: undefined,
      [Symbol(mongoose:validatorError)]: true
    }
  },
  _message: 'User validation failed',
  name: 'ValidationError'
}
[2020-05-02T10:49:43.030] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:49:44.675] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:49:47.529] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:49:49.132] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:49:55.146] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:49:56.567] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:50:02.065] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:50:02.066] [INFO] Logging:  - Method: POST
[2020-05-02T10:50:02.067] [INFO] Logging:  - Path:   /api/users
[2020-05-02T10:50:02.067] [INFO] Logging:  - Body:   { email: 'Planwewt@gmail.com', phone: 9740579, password: 'abcddfd' }
[2020-05-02T10:50:02.069] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:50:02.148] [INFO] Logging:  - [
  '$2b$10$V9Cd3DxCnzuB1dodSOdAiOfgjULJbnyH9DYk2fokyFfQopHqX66tm',
  'Planwewt@gmail.com',
  9740579
]
[2020-05-02T10:50:02.150] [INFO] Logging:  - 9740579
[2020-05-02T10:50:02.404] [INFO] Logging:  - {
  score: 0,
  streak: 1,
  role: 'USER',
  isPhoneVerified: false,
  isEmailVerified: false,
  joinedOn: 2020-05-02T05:19:55.123Z,
  isActive: true,
  _id: 5ead03027b535775e046ed6b,
  email: 'Planwewt@gmail.com',
  phoneNumber: 9740579,
  passwordHash: '$2b$10$V9Cd3DxCnzuB1dodSOdAiOfgjULJbnyH9DYk2fokyFfQopHqX66tm',
  questionsAttempted: [],
  __v: 0
}
[2020-05-02T10:50:18.779] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:50:18.781] [INFO] Logging:  - Method: GET
[2020-05-02T10:50:18.782] [INFO] Logging:  - Path:   /api/users
[2020-05-02T10:50:18.797] [INFO] Logging:  - Body:   {}
[2020-05-02T10:50:18.800] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:51:03.302] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:51:03.325] [INFO] Logging:  - Method: POST
[2020-05-02T10:51:03.326] [INFO] Logging:  - Path:   /api/users
[2020-05-02T10:51:03.327] [INFO] Logging:  - Body:   {
  email: 'Planweweret@gmail.com',
  phone: 9740539479,
  password: 'abcddfd',
  role: 'ADMIN'
}
[2020-05-02T10:51:03.358] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:51:03.435] [INFO] Logging:  - [
  '$2b$10$fA53SqV2XfQ7G7lS186Hs.RjIFNKtNTJU3PXMDWo/al/rDDz3oNpK',
  'Planweweret@gmail.com',
  9740539479
]
[2020-05-02T10:51:03.438] [INFO] Logging:  - 9740539479
[2020-05-02T10:51:03.976] [INFO] Logging:  - {
  score: 0,
  streak: 1,
  role: 'ADMIN',
  isPhoneVerified: false,
  isEmailVerified: false,
  joinedOn: 2020-05-02T05:19:55.123Z,
  isActive: true,
  _id: 5ead033f7b535775e046ed6c,
  email: 'Planweweret@gmail.com',
  phoneNumber: 9740539479,
  passwordHash: '$2b$10$fA53SqV2XfQ7G7lS186Hs.RjIFNKtNTJU3PXMDWo/al/rDDz3oNpK',
  questionsAttempted: [],
  __v: 0
}
[2020-05-02T10:51:09.038] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:51:09.041] [INFO] Logging:  - Method: GET
[2020-05-02T10:51:09.044] [INFO] Logging:  - Path:   /api/users
[2020-05-02T10:51:09.062] [INFO] Logging:  - Body:   {}
[2020-05-02T10:51:09.064] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:51:50.713] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:51:52.671] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:52:06.854] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:52:06.856] [INFO] Logging:  - Method: GET
[2020-05-02T10:52:06.857] [INFO] Logging:  - Path:   /api/questions/1
[2020-05-02T10:52:06.868] [INFO] Logging:  - Body:   {}
[2020-05-02T10:52:06.869] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:52:12.132] [INFO] Logging:  - ---Request begins here---
[2020-05-02T10:52:12.132] [INFO] Logging:  - Method: GET
[2020-05-02T10:52:12.133] [INFO] Logging:  - Path:   /api/questions/2
[2020-05-02T10:52:12.134] [INFO] Logging:  - Body:   {}
[2020-05-02T10:52:12.151] [INFO] Logging:  - ---Request ends here---
[2020-05-02T10:53:06.417] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:53:08.178] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:53:34.622] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:53:36.609] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:54:02.624] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:54:04.366] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:56:32.339] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:56:34.133] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:59:19.917] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:59:22.217] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T10:59:23.918] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T10:59:25.843] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:20:09.651] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:20:11.253] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:21:44.795] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:21:46.543] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:21:58.913] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:22:00.451] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:22:14.825] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:22:16.379] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:23:34.554] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:23:36.225] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:27:39.735] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:27:41.415] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:27:45.147] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:27:46.566] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:28:52.033] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:28:53.626] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:32:52.476] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:32:54.441] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:33:27.182] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:33:29.025] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:34:10.839] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:34:12.309] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:34:21.044] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:34:22.452] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:34:39.590] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:34:41.295] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:35:17.696] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:35:17.698] [INFO] Logging:  - Method: GET
[2020-05-02T16:35:17.700] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T16:35:17.713] [INFO] Logging:  - Body:   {}
[2020-05-02T16:35:17.716] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:35:18.076] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:35:18.077] [INFO] Logging:  - Method: GET
[2020-05-02T16:35:18.078] [INFO] Logging:  - Path:   /favicon.ico
[2020-05-02T16:35:18.079] [INFO] Logging:  - Body:   {}
[2020-05-02T16:35:18.088] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:35:51.051] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:35:52.581] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:35:59.188] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:36:00.762] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:36:26.272] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:36:26.274] [INFO] Logging:  - Method: PUT
[2020-05-02T16:36:26.277] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T16:36:26.279] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T16:36:26.281] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:36:54.585] [ERROR] Logging:  - Error: read ECONNRESET
    at TCP.onStreamRead (internal/stream_base_commons.js:200:27) {
  errno: 'ECONNRESET',
  code: 'ECONNRESET',
  syscall: 'read',
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: Writable {
    _writableState: WritableState {
      objectMode: false,
      highWaterMark: 16384,
      finalCalled: false,
      needDrain: false,
      ending: false,
      ended: false,
      finished: false,
      destroyed: false,
      decodeStrings: true,
      defaultEncoding: 'utf8',
      length: 0,
      writing: false,
      corked: 0,
      sync: true,
      bufferProcessing: false,
      onwrite: [Function: bound onwrite],
      writecb: null,
      writelen: 0,
      afterWriteTickInfo: null,
      bufferedRequest: null,
      lastBufferedRequest: null,
      pendingcb: 0,
      prefinished: false,
      errorEmitted: false,
      emitClose: true,
      autoDestroy: false,
      bufferedRequestCount: 0,
      corkedRequestsFree: [Object]
    },
    writable: true,
    _events: [Object: null prototype] {
      response: [Function: handleResponse],
      error: [Function: handleRequestError]
    },
    _eventsCount: 2,
    _maxListeners: undefined,
    _options: {
      protocol: 'http:',
      maxRedirects: 21,
      maxBodyLength: 10485760,
      path: '/api/questions/5eacec447cfc3b5a8885beda',
      method: 'PUT',
      headers: [Object],
      agent: undefined,
      agents: [Object],
      auth: undefined,
      hostname: '127.0.0.1',
      port: '3000',
      nativeProtocols: [Object],
      pathname: '/api/questions/5eacec447cfc3b5a8885beda'
    },
    _redirectCount: 0,
    _redirects: [],
    _requestBodyLength: 21,
    _requestBodyBuffers: [ [Object] ],
    _onNativeResponse: [Function],
    _currentRequest: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Socket],
      connection: [Socket],
      _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.19.2\r\n' +
        'Content-Length: 21\r\n' +
        'Host: 127.0.0.1:3000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'PUT',
      path: '/api/questions/5eacec447cfc3b5a8885beda',
      _ended: false,
      res: null,
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      _redirectable: [Circular],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
  },
  response: undefined,
  isAxiosError: true,
  toJSON: [Function]
}
[2020-05-02T16:36:55.688] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:36:57.391] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:46:30.777] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:46:32.857] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:46:41.484] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:46:41.486] [INFO] Logging:  - Method: PUT
[2020-05-02T16:46:41.487] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T16:46:41.488] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T16:46:41.488] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:46:41.496] [ERROR] Logging:  - Error: Request failed with status code 500
    at createError (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\createError.js:16:15)
    at settle (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\settle.js:17:12)
    at IncomingMessage.handleStreamEnd (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\adapters\http.js:236:11)
    at IncomingMessage.emit (events.js:228:7)
    at endReadableNT (_stream_readable.js:1185:12)
    at processTicksAndRejections (internal/process/task_queues.js:81:21) {
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 21\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 500,
      statusMessage: 'Internal Server Error',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 21,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  response: {
    status: 500,
    statusText: 'Internal Server Error',
    headers: {
      'x-powered-by': 'Express',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '2412',
      date: 'Sat, 02 May 2020 11:16:41 GMT',
      connection: 'close'
    },
    config: {
      url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      method: 'put',
      data: '{"difficultyLevel":4}',
      headers: [Object],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 0,
      adapter: [Function: httpAdapter],
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      validateStatus: [Function: validateStatus]
    },
    request: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Socket],
      connection: [Socket],
      _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.19.2\r\n' +
        'Content-Length: 21\r\n' +
        'Host: 127.0.0.1:3000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'PUT',
      path: '/api/questions/5eacec447cfc3b5a8885beda',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      _redirectable: [Writable],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>TypeError: body.forEach is not a function<br> &nbsp; &nbsp;at createNewQueryObject (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\controllers\\questions.js:13:8)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\controllers\\questions.js:79:26<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:137:13)<br> &nbsp; &nbsp;at Route.dispatch (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:112:3)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:281:22<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:354:14)<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:365:14)<br> &nbsp; &nbsp;at Function.process_params (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:410:3)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:275:10)<br> &nbsp; &nbsp;at Function.handle (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:174:3)<br> &nbsp; &nbsp;at router (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:47:12)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at trim_prefix (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:317:13)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:284:7</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  isAxiosError: true,
  toJSON: [Function]
}
[2020-05-02T16:47:26.005] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:47:27.397] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:47:44.009] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:47:44.011] [INFO] Logging:  - Method: PUT
[2020-05-02T16:47:44.011] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T16:47:44.012] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T16:47:44.013] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:47:44.264] [INFO] Logging:  - null
[2020-05-02T16:47:44.282] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-length': '0',
    etag: 'W/"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"',
    date: 'Sat, 02 May 2020 11:17:44 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 21\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 21,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: ''
}
[2020-05-02T16:48:14.889] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:48:16.433] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:48:49.965] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:48:49.966] [INFO] Logging:  - Method: GET
[2020-05-02T16:48:49.968] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T16:48:49.969] [INFO] Logging:  - Body:   {}
[2020-05-02T16:48:49.971] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:48:57.777] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:48:57.778] [INFO] Logging:  - Method: GET
[2020-05-02T16:48:57.778] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T16:48:57.779] [INFO] Logging:  - Body:   {}
[2020-05-02T16:48:57.780] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:49:41.517] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:49:43.087] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:49:52.297] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:49:52.298] [INFO] Logging:  - Method: PUT
[2020-05-02T16:49:52.299] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T16:49:52.299] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T16:49:52.300] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:49:52.302] [INFO] Logging:  - Keys: difficultyLevel
[2020-05-02T16:49:52.537] [INFO] Logging:  - null
[2020-05-02T16:49:52.550] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-length': '0',
    etag: 'W/"0-2jmj7l5rSw0yVb/vlWAYkK/YBwk"',
    date: 'Sat, 02 May 2020 11:19:52 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 21\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 21,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: ''
}
[2020-05-02T16:53:53.041] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:53:54.835] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:54:02.534] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:54:05.550] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:54:21.730] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:54:21.731] [INFO] Logging:  - Method: PUT
[2020-05-02T16:54:21.734] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T16:54:21.735] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T16:54:21.737] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:54:21.751] [ERROR] Logging:  - Error: Request failed with status code 500
    at createError (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\createError.js:16:15)
    at settle (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\settle.js:17:12)
    at IncomingMessage.handleStreamEnd (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\adapters\http.js:236:11)
    at IncomingMessage.emit (events.js:228:7)
    at endReadableNT (_stream_readable.js:1185:12)
    at processTicksAndRejections (internal/process/task_queues.js:81:21) {
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 21\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 500,
      statusMessage: 'Internal Server Error',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 21,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  response: {
    status: 500,
    statusText: 'Internal Server Error',
    headers: {
      'x-powered-by': 'Express',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '2426',
      date: 'Sat, 02 May 2020 11:24:21 GMT',
      connection: 'close'
    },
    config: {
      url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      method: 'put',
      data: '{"difficultyLevel":4}',
      headers: [Object],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 0,
      adapter: [Function: httpAdapter],
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      validateStatus: [Function: validateStatus]
    },
    request: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Socket],
      connection: [Socket],
      _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.19.2\r\n' +
        'Content-Length: 21\r\n' +
        'Host: 127.0.0.1:3000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'PUT',
      path: '/api/questions/5eacec447cfc3b5a8885beda',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      _redirectable: [Writable],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>TypeError: logger is not a function<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\controllers\\questions.js:80:3<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:137:13)<br> &nbsp; &nbsp;at Route.dispatch (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:112:3)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:281:22<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:354:14)<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:365:14)<br> &nbsp; &nbsp;at Function.process_params (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:410:3)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:275:10)<br> &nbsp; &nbsp;at Function.handle (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:174:3)<br> &nbsp; &nbsp;at router (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:47:12)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at trim_prefix (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:317:13)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:284:7<br> &nbsp; &nbsp;at Function.process_params (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:335:12)</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  isAxiosError: true,
  toJSON: [Function]
}
[2020-05-02T16:54:53.206] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:54:54.949] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:55:04.956] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:55:06.554] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:55:16.262] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:55:18.352] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:55:26.334] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:55:27.780] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:55:37.315] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:55:39.211] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:55:39.250] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:55:39.251] [INFO] Logging:  - Method: PUT
[2020-05-02T16:55:39.251] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T16:55:39.252] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T16:55:39.253] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:55:39.260] [ERROR] Logging:  - Error: Request failed with status code 500
    at createError (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\createError.js:16:15)
    at settle (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\settle.js:17:12)
    at IncomingMessage.handleStreamEnd (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\adapters\http.js:236:11)
    at IncomingMessage.emit (events.js:228:7)
    at endReadableNT (_stream_readable.js:1185:12)
    at processTicksAndRejections (internal/process/task_queues.js:81:21) {
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 21\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 500,
      statusMessage: 'Internal Server Error',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 21,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  response: {
    status: 500,
    statusText: 'Internal Server Error',
    headers: {
      'x-powered-by': 'Express',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '2426',
      date: 'Sat, 02 May 2020 11:25:39 GMT',
      connection: 'close'
    },
    config: {
      url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      method: 'put',
      data: '{"difficultyLevel":4}',
      headers: [Object],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 0,
      adapter: [Function: httpAdapter],
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      validateStatus: [Function: validateStatus]
    },
    request: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Socket],
      connection: [Socket],
      _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.19.2\r\n' +
        'Content-Length: 21\r\n' +
        'Host: 127.0.0.1:3000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'PUT',
      path: '/api/questions/5eacec447cfc3b5a8885beda',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      _redirectable: [Writable],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>TypeError: logger is not a function<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\controllers\\questions.js:80:3<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:137:13)<br> &nbsp; &nbsp;at Route.dispatch (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:112:3)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:281:22<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:354:14)<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:365:14)<br> &nbsp; &nbsp;at Function.process_params (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:410:3)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:275:10)<br> &nbsp; &nbsp;at Function.handle (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:174:3)<br> &nbsp; &nbsp;at router (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:47:12)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at trim_prefix (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:317:13)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:284:7<br> &nbsp; &nbsp;at Function.process_params (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:335:12)</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  isAxiosError: true,
  toJSON: [Function]
}
[2020-05-02T16:56:23.778] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:56:25.471] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:56:31.888] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:56:31.890] [INFO] Logging:  - Method: PUT
[2020-05-02T16:56:31.891] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T16:56:31.892] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T16:56:31.893] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:56:31.894] [INFO] Logging:  - Sunny1: 
[2020-05-02T16:56:31.894] [INFO] Logging:  - Keys: difficultyLevel
[2020-05-02T16:56:32.144] [INFO] Logging:  - success
[2020-05-02T16:57:03.373] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:57:04.789] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:57:22.710] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:57:24.268] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:57:26.236] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:57:27.667] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:57:34.164] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T16:57:35.753] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T16:57:42.692] [INFO] Logging:  - ---Request begins here---
[2020-05-02T16:57:42.692] [INFO] Logging:  - Method: PUT
[2020-05-02T16:57:42.693] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T16:57:42.694] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T16:57:42.696] [INFO] Logging:  - ---Request ends here---
[2020-05-02T16:57:42.697] [INFO] Logging:  - Questions:  [Function: router] {
  params: {},
  _params: [],
  caseSensitive: undefined,
  mergeParams: undefined,
  strict: undefined,
  stack: [
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: undefined,
      path: undefined,
      keys: [],
      regexp: /^\/?$/i,
      route: [Route]
    },
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: [Object],
      path: '/5eacec447cfc3b5a8885beda',
      keys: [Array],
      regexp: /^\/(?:([^\/]+?))\/?$/i,
      route: [Route]
    },
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: undefined,
      path: undefined,
      keys: [],
      regexp: /^\/?$/i,
      route: [Route]
    },
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: [Object],
      path: '/5eacec447cfc3b5a8885beda',
      keys: [Array],
      regexp: /^\/(?:([^\/]+?))\/?$/i,
      route: [Route]
    }
  ]
}
[2020-05-02T16:57:42.972] [INFO] Logging:  - success
[2020-05-02T17:01:39.853] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:01:41.569] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:01:52.749] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:01:52.750] [INFO] Logging:  - Method: PUT
[2020-05-02T17:01:52.751] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:01:52.751] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:01:52.752] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:01:52.754] [INFO] Logging:  - Questions:  [Function: router] {
  params: {},
  _params: [],
  caseSensitive: undefined,
  mergeParams: undefined,
  strict: undefined,
  stack: [
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: undefined,
      path: undefined,
      keys: [],
      regexp: /^\/?$/i,
      route: [Route]
    },
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: [Object],
      path: '/5eacec447cfc3b5a8885beda',
      keys: [Array],
      regexp: /^\/(?:([^\/]+?))\/?$/i,
      route: [Route]
    },
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: undefined,
      path: undefined,
      keys: [],
      regexp: /^\/?$/i,
      route: [Route]
    },
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: [Object],
      path: '/5eacec447cfc3b5a8885beda',
      keys: [Array],
      regexp: /^\/(?:([^\/]+?))\/?$/i,
      route: [Route]
    }
  ]
}
[2020-05-02T17:01:53.000] [INFO] Logging:  - success
[2020-05-02T17:03:33.035] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:03:34.760] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:03:36.838] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:03:48.321] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:03:48.323] [INFO] Logging:  - Method: PUT
[2020-05-02T17:03:48.323] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:03:48.327] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:03:48.328] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:03:48.329] [INFO] Logging:  - Questions:  [Function: router] {
  params: {},
  _params: [],
  caseSensitive: undefined,
  mergeParams: undefined,
  strict: undefined,
  stack: [
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: undefined,
      path: undefined,
      keys: [],
      regexp: /^\/?$/i,
      route: [Route]
    },
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: [Object],
      path: '/5eacec447cfc3b5a8885beda',
      keys: [Array],
      regexp: /^\/(?:([^\/]+?))\/?$/i,
      route: [Route]
    },
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: undefined,
      path: undefined,
      keys: [],
      regexp: /^\/?$/i,
      route: [Route]
    },
    Layer {
      handle: [Function: bound dispatch],
      name: 'bound dispatch',
      params: [Object],
      path: '/5eacec447cfc3b5a8885beda',
      keys: [Array],
      regexp: /^\/(?:([^\/]+?))\/?$/i,
      route: [Route]
    }
  ]
}
[2020-05-02T17:03:49.065] [INFO] Logging:  - success
[2020-05-02T17:05:23.205] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:05:24.878] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:05:32.077] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:05:33.537] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:05:45.502] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:05:45.503] [INFO] Logging:  - Method: PUT
[2020-05-02T17:05:45.503] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:05:45.504] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:05:45.506] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:05:45.507] [INFO] Logging:  - Questions:  { dateAsked: 2020-05-02T11:35:45.507Z, difficultyLevel: 4 }
[2020-05-02T17:05:45.750] [INFO] Logging:  - null
[2020-05-02T17:05:45.760] [INFO] Logging:  - success
[2020-05-02T17:06:28.889] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:06:30.495] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:06:32.052] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:06:32.053] [INFO] Logging:  - Method: PUT
[2020-05-02T17:06:32.054] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:06:32.055] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:06:32.056] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:06:32.057] [INFO] Logging:  - objectIdStr:  5eacec447cfc3b5a8885beda
[2020-05-02T17:06:32.361] [INFO] Logging:  - null
[2020-05-02T17:06:32.383] [INFO] Logging:  - success
[2020-05-02T17:07:39.824] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:07:41.402] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:07:46.051] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:07:46.052] [INFO] Logging:  - Method: PUT
[2020-05-02T17:07:46.052] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:07:46.053] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:07:46.054] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:07:46.061] [ERROR] Logging:  - Error: Request failed with status code 500
    at createError (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\createError.js:16:15)
    at settle (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\settle.js:17:12)
    at IncomingMessage.handleStreamEnd (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\adapters\http.js:236:11)
    at IncomingMessage.emit (events.js:228:7)
    at endReadableNT (_stream_readable.js:1185:12)
    at processTicksAndRejections (internal/process/task_queues.js:81:21) {
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 21\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 500,
      statusMessage: 'Internal Server Error',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 21,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  response: {
    status: 500,
    statusText: 'Internal Server Error',
    headers: {
      'x-powered-by': 'Express',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '2431',
      date: 'Sat, 02 May 2020 11:37:46 GMT',
      connection: 'close'
    },
    config: {
      url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      method: 'put',
      data: '{"difficultyLevel":4}',
      headers: [Object],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 0,
      adapter: [Function: httpAdapter],
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      validateStatus: [Function: validateStatus]
    },
    request: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Socket],
      connection: [Socket],
      _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.19.2\r\n' +
        'Content-Length: 21\r\n' +
        'Host: 127.0.0.1:3000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'PUT',
      path: '/api/questions/5eacec447cfc3b5a8885beda',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      _redirectable: [Writable],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>ReferenceError: mongoose is not defined<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\controllers\\questions.js:80:20<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:137:13)<br> &nbsp; &nbsp;at Route.dispatch (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:112:3)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:281:22<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:354:14)<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:365:14)<br> &nbsp; &nbsp;at Function.process_params (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:410:3)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:275:10)<br> &nbsp; &nbsp;at Function.handle (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:174:3)<br> &nbsp; &nbsp;at router (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:47:12)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at trim_prefix (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:317:13)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:284:7<br> &nbsp; &nbsp;at Function.process_params (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:335:12)</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  isAxiosError: true,
  toJSON: [Function]
}
[2020-05-02T17:08:20.440] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:08:21.897] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:08:29.892] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:08:29.893] [INFO] Logging:  - Method: PUT
[2020-05-02T17:08:29.893] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:08:29.894] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:08:29.895] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:08:29.896] [INFO] Logging:  - objectIdStr:  5eacec447cfc3b5a8885beda
[2020-05-02T17:08:30.136] [INFO] Logging:  - null
[2020-05-02T17:08:30.151] [INFO] Logging:  - success
[2020-05-02T17:08:47.462] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:08:48.996] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:09:22.395] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:09:24.158] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:09:34.051] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:09:34.052] [INFO] Logging:  - Method: PUT
[2020-05-02T17:09:34.053] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:09:34.054] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:09:34.055] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:09:34.057] [INFO] Logging:  - objectId:  5eacec447cfc3b5a8885beda
[2020-05-02T17:09:34.063] [ERROR] Logging:  - Error: Request failed with status code 500
    at createError (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\createError.js:16:15)
    at settle (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\core\settle.js:17:12)
    at IncomingMessage.handleStreamEnd (C:\Users\sunny.redhu\Desktop\current-stuff\jhakhaas-backend\node_modules\axios\lib\adapters\http.js:236:11)
    at IncomingMessage.emit (events.js:228:7)
    at endReadableNT (_stream_readable.js:1185:12)
    at processTicksAndRejections (internal/process/task_queues.js:81:21) {
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 21\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 500,
      statusMessage: 'Internal Server Error',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 21,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  response: {
    status: 500,
    statusText: 'Internal Server Error',
    headers: {
      'x-powered-by': 'Express',
      'content-security-policy': "default-src 'none'",
      'x-content-type-options': 'nosniff',
      'content-type': 'text/html; charset=utf-8',
      'content-length': '2431',
      date: 'Sat, 02 May 2020 11:39:34 GMT',
      connection: 'close'
    },
    config: {
      url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      method: 'put',
      data: '{"difficultyLevel":4}',
      headers: [Object],
      transformRequest: [Array],
      transformResponse: [Array],
      timeout: 0,
      adapter: [Function: httpAdapter],
      xsrfCookieName: 'XSRF-TOKEN',
      xsrfHeaderName: 'X-XSRF-TOKEN',
      maxContentLength: -1,
      validateStatus: [Function: validateStatus]
    },
    request: ClientRequest {
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      outputData: [],
      outputSize: 0,
      writable: true,
      _last: true,
      chunkedEncoding: false,
      shouldKeepAlive: false,
      useChunkedEncodingByDefault: true,
      sendDate: false,
      _removedConnection: false,
      _removedContLen: false,
      _removedTE: false,
      _contentLength: null,
      _hasBody: true,
      _trailer: '',
      finished: true,
      _headerSent: true,
      socket: [Socket],
      connection: [Socket],
      _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
        'Accept: application/json, text/plain, */*\r\n' +
        'Content-Type: application/json;charset=utf-8\r\n' +
        'User-Agent: axios/0.19.2\r\n' +
        'Content-Length: 21\r\n' +
        'Host: 127.0.0.1:3000\r\n' +
        'Connection: close\r\n' +
        '\r\n',
      _onPendingData: [Function: noopPendingOutput],
      agent: [Agent],
      socketPath: undefined,
      method: 'PUT',
      path: '/api/questions/5eacec447cfc3b5a8885beda',
      _ended: true,
      res: [IncomingMessage],
      aborted: false,
      timeoutCb: null,
      upgradeOrConnect: false,
      parser: null,
      maxHeadersCount: null,
      _redirectable: [Writable],
      [Symbol(kNeedDrain)]: false,
      [Symbol(isCorked)]: false,
      [Symbol(kOutHeaders)]: [Object: null prototype]
    },
    data: '<!DOCTYPE html>\n' +
      '<html lang="en">\n' +
      '<head>\n' +
      '<meta charset="utf-8">\n' +
      '<title>Error</title>\n' +
      '</head>\n' +
      '<body>\n' +
      '<pre>ReferenceError: ObjectId is not defined<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\controllers\\questions.js:89:30<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:137:13)<br> &nbsp; &nbsp;at Route.dispatch (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\route.js:112:3)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:281:22<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:354:14)<br> &nbsp; &nbsp;at param (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:365:14)<br> &nbsp; &nbsp;at Function.process_params (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:410:3)<br> &nbsp; &nbsp;at next (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:275:10)<br> &nbsp; &nbsp;at Function.handle (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:174:3)<br> &nbsp; &nbsp;at router (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:47:12)<br> &nbsp; &nbsp;at Layer.handle [as handle_request] (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\layer.js:95:5)<br> &nbsp; &nbsp;at trim_prefix (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:317:13)<br> &nbsp; &nbsp;at C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:284:7<br> &nbsp; &nbsp;at Function.process_params (C:\\Users\\sunny.redhu\\Desktop\\current-stuff\\jhakhaas-backend\\node_modules\\express\\lib\\router\\index.js:335:12)</pre>\n' +
      '</body>\n' +
      '</html>\n'
  },
  isAxiosError: true,
  toJSON: [Function]
}
[2020-05-02T17:09:47.022] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:09:48.507] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:10:01.112] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:10:01.113] [INFO] Logging:  - Method: PUT
[2020-05-02T17:10:01.114] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:10:01.115] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:10:01.116] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:10:01.118] [INFO] Logging:  - objectId:  5eacec447cfc3b5a8885beda
[2020-05-02T17:10:01.359] [INFO] Logging:  - []
[2020-05-02T17:10:01.379] [INFO] Logging:  - success
[2020-05-02T17:10:18.755] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:10:20.379] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:10:41.587] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:10:43.002] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:13:50.566] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:13:52.150] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:14:55.451] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:14:56.984] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:15:01.603] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:15:03.057] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:15:08.473] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:15:08.473] [INFO] Logging:  - Method: PUT
[2020-05-02T17:15:08.474] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:15:08.474] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:15:08.476] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:15:08.477] [INFO] Logging:  - objectId:  5eacec447cfc3b5a8885beda
[2020-05-02T17:15:08.746] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '277',
    etag: 'W/"115-26ii8/xfxD8vWeOT7aWkUMqNTBw"',
    date: 'Sat, 02 May 2020 11:45:08 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 21\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 21,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: {
    isAlreadyAsked: false,
    difficultyLevel: 1,
    questionRating: 4,
    _id: '5eacec447cfc3b5a8885beda',
    problemStatement: 'Sum of 50 and 10 is: ',
    options: { a: '60', b: '30', c: '200', d: '2' },
    solution: 'Answer: A\nSince 50 + 10 = 60',
    dateAsked: '2020-05-02T03:43:00.868Z',
    __v: 0
  }
}
[2020-05-02T17:16:10.781] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:16:12.618] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:16:14.103] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:16:36.329] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:16:36.331] [INFO] Logging:  - Method: PUT
[2020-05-02T17:16:36.331] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:16:36.332] [INFO] Logging:  - Body:   { difficultyLevel: 4 }
[2020-05-02T17:16:36.333] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:16:36.615] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '277',
    etag: 'W/"115-2Rb6QxzkaEVK04P8La1klHfkKrg"',
    date: 'Sat, 02 May 2020 11:46:36 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"difficultyLevel":4}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 21
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 21\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 21,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: {
    isAlreadyAsked: false,
    difficultyLevel: 4,
    questionRating: 4,
    _id: '5eacec447cfc3b5a8885beda',
    problemStatement: 'Sum of 50 and 10 is: ',
    options: { a: '60', b: '30', c: '200', d: '2' },
    solution: 'Answer: A\nSince 50 + 10 = 60',
    dateAsked: '2020-05-02T11:46:36.334Z',
    __v: 0
  }
}
[2020-05-02T17:16:50.507] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:16:50.508] [INFO] Logging:  - Method: GET
[2020-05-02T17:16:50.511] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T17:16:50.512] [INFO] Logging:  - Body:   {}
[2020-05-02T17:16:50.514] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:17:28.083] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:17:29.677] [INFO] Logging:  - Successfully connected to MongoDB!
[2020-05-02T17:17:34.546] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:17:34.547] [INFO] Logging:  - Method: PUT
[2020-05-02T17:17:34.547] [INFO] Logging:  - Path:   /api/questions/5eacec447cfc3b5a8885beda
[2020-05-02T17:17:34.548] [INFO] Logging:  - Body:   { questionRating: 1, isAlreadyAsked: true }
[2020-05-02T17:17:34.549] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:17:34.829] [INFO] Logging:  - {
  status: 200,
  statusText: 'OK',
  headers: {
    'x-powered-by': 'Express',
    'content-type': 'application/json; charset=utf-8',
    'content-length': '276',
    etag: 'W/"114-kPh7UBklD/drPR/mNNqj2XXSb2Y"',
    date: 'Sat, 02 May 2020 11:47:34 GMT',
    connection: 'close'
  },
  config: {
    url: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
    method: 'put',
    data: '{"questionRating":1,"isAlreadyAsked":true}',
    headers: {
      Accept: 'application/json, text/plain, */*',
      'Content-Type': 'application/json;charset=utf-8',
      'User-Agent': 'axios/0.19.2',
      'Content-Length': 42
    },
    transformRequest: [ [Function: transformRequest] ],
    transformResponse: [ [Function: transformResponse] ],
    timeout: 0,
    adapter: [Function: httpAdapter],
    xsrfCookieName: 'XSRF-TOKEN',
    xsrfHeaderName: 'X-XSRF-TOKEN',
    maxContentLength: -1,
    validateStatus: [Function: validateStatus]
  },
  request: ClientRequest {
    _events: [Object: null prototype] {
      socket: [Function],
      abort: [Function],
      aborted: [Function],
      error: [Function],
      timeout: [Function],
      prefinish: [Function: requestOnPrefinish]
    },
    _eventsCount: 6,
    _maxListeners: undefined,
    outputData: [],
    outputSize: 0,
    writable: true,
    _last: true,
    chunkedEncoding: false,
    shouldKeepAlive: false,
    useChunkedEncodingByDefault: true,
    sendDate: false,
    _removedConnection: false,
    _removedContLen: false,
    _removedTE: false,
    _contentLength: null,
    _hasBody: true,
    _trailer: '',
    finished: true,
    _headerSent: true,
    socket: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    connection: Socket {
      connecting: false,
      _hadError: false,
      _parent: null,
      _host: null,
      _readableState: [ReadableState],
      readable: true,
      _events: [Object: null prototype],
      _eventsCount: 6,
      _maxListeners: undefined,
      _writableState: [WritableState],
      writable: false,
      allowHalfOpen: false,
      _sockname: null,
      _pendingData: null,
      _pendingEncoding: '',
      server: null,
      _server: null,
      parser: null,
      _httpMessage: [Circular],
      [Symbol(asyncId)]: 6,
      [Symbol(kHandle)]: [TCP],
      [Symbol(lastWriteQueueSize)]: 0,
      [Symbol(timeout)]: null,
      [Symbol(kBuffer)]: null,
      [Symbol(kBufferCb)]: null,
      [Symbol(kBufferGen)]: null,
      [Symbol(kBytesRead)]: 0,
      [Symbol(kBytesWritten)]: 0
    },
    _header: 'PUT /api/questions/5eacec447cfc3b5a8885beda HTTP/1.1\r\n' +
      'Accept: application/json, text/plain, */*\r\n' +
      'Content-Type: application/json;charset=utf-8\r\n' +
      'User-Agent: axios/0.19.2\r\n' +
      'Content-Length: 42\r\n' +
      'Host: 127.0.0.1:3000\r\n' +
      'Connection: close\r\n' +
      '\r\n',
    _onPendingData: [Function: noopPendingOutput],
    agent: Agent {
      _events: [Object: null prototype],
      _eventsCount: 1,
      _maxListeners: undefined,
      defaultPort: 80,
      protocol: 'http:',
      options: [Object],
      requests: {},
      sockets: [Object],
      freeSockets: {},
      keepAliveMsecs: 1000,
      keepAlive: false,
      maxSockets: Infinity,
      maxFreeSockets: 256
    },
    socketPath: undefined,
    method: 'PUT',
    path: '/api/questions/5eacec447cfc3b5a8885beda',
    _ended: true,
    res: IncomingMessage {
      _readableState: [ReadableState],
      readable: false,
      _events: [Object: null prototype],
      _eventsCount: 3,
      _maxListeners: undefined,
      socket: [Socket],
      connection: [Socket],
      httpVersionMajor: 1,
      httpVersionMinor: 1,
      httpVersion: '1.1',
      complete: true,
      headers: [Object],
      rawHeaders: [Array],
      trailers: {},
      rawTrailers: [],
      aborted: false,
      upgrade: false,
      url: '',
      method: null,
      statusCode: 200,
      statusMessage: 'OK',
      client: [Socket],
      _consuming: false,
      _dumped: false,
      req: [Circular],
      responseUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda',
      redirects: []
    },
    aborted: false,
    timeoutCb: null,
    upgradeOrConnect: false,
    parser: null,
    maxHeadersCount: null,
    _redirectable: Writable {
      _writableState: [WritableState],
      writable: true,
      _events: [Object: null prototype],
      _eventsCount: 2,
      _maxListeners: undefined,
      _options: [Object],
      _redirectCount: 0,
      _redirects: [],
      _requestBodyLength: 42,
      _requestBodyBuffers: [],
      _onNativeResponse: [Function],
      _currentRequest: [Circular],
      _currentUrl: 'http://127.0.0.1:3000/api/questions/5eacec447cfc3b5a8885beda'
    },
    [Symbol(kNeedDrain)]: false,
    [Symbol(isCorked)]: false,
    [Symbol(kOutHeaders)]: [Object: null prototype] {
      accept: [Array],
      'content-type': [Array],
      'user-agent': [Array],
      'content-length': [Array],
      host: [Array]
    }
  },
  data: {
    isAlreadyAsked: true,
    difficultyLevel: 4,
    questionRating: 1,
    _id: '5eacec447cfc3b5a8885beda',
    problemStatement: 'Sum of 50 and 10 is: ',
    options: { a: '60', b: '30', c: '200', d: '2' },
    solution: 'Answer: A\nSince 50 + 10 = 60',
    dateAsked: '2020-05-02T11:47:34.551Z',
    __v: 0
  }
}
[2020-05-02T17:17:37.432] [INFO] Logging:  - ---Request begins here---
[2020-05-02T17:17:37.434] [INFO] Logging:  - Method: GET
[2020-05-02T17:17:37.435] [INFO] Logging:  - Path:   /api/questions
[2020-05-02T17:17:37.437] [INFO] Logging:  - Body:   {}
[2020-05-02T17:17:37.438] [INFO] Logging:  - ---Request ends here---
[2020-05-02T17:17:45.836] [INFO] Logging:  - Listening on http://127.0.0.1:3000
[2020-05-02T17:17:47.293] [INFO] Logging:  - Successfully connected to MongoDB!
